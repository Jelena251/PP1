
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Feb 09 16:03:07 CET 2017
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java.util.Stack;
import java_cup.runtime.*;
import org.apache.log4j.*;
import java.util.*;
import rs.ac.bg.etf.pp1.util.Log4JUtils;
import rs.etf.pp1.symboltable.visitors.*;
import java.io.*;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.mj.runtime.Code;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Feb 09 16:03:07 CET 2017
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\212\000\002\002\010\000\002\002\004\000\002\052" +
    "\003\000\002\003\004\000\002\003\002\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\067\002\000" +
    "\002\005\007\000\002\056\003\000\002\006\005\000\002" +
    "\006\003\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\070\002\000\002\010\005\000\002\014\004" +
    "\000\002\014\003\000\002\011\005\000\002\011\003\000" +
    "\002\066\003\000\002\066\005\000\002\066\003\000\002" +
    "\012\004\000\002\012\002\000\002\013\005\000\002\013" +
    "\007\000\002\063\003\000\002\026\005\000\002\026\010" +
    "\000\002\016\004\000\002\016\002\000\002\015\004\000" +
    "\002\015\003\000\002\062\003\000\002\062\003\000\002" +
    "\071\002\000\002\072\002\000\002\073\002\000\002\017" +
    "\016\000\002\020\003\000\002\020\002\000\002\021\005" +
    "\000\002\021\003\000\002\022\004\000\002\022\006\000" +
    "\002\022\004\000\002\023\004\000\002\023\002\000\002" +
    "\024\003\000\002\024\003\000\002\041\010\000\002\041" +
    "\013\000\002\041\011\000\002\074\002\000\002\075\002" +
    "\000\002\076\002\000\002\041\016\000\002\040\004\000" +
    "\002\040\004\000\002\040\004\000\002\040\004\000\002" +
    "\040\005\000\002\040\007\000\002\040\007\000\002\040" +
    "\011\000\002\040\005\000\002\030\002\000\002\033\004" +
    "\000\002\032\002\000\002\031\002\000\002\025\005\000" +
    "\002\025\005\000\002\025\006\000\002\025\004\000\002" +
    "\025\004\000\002\025\003\000\002\025\002\000\002\053" +
    "\003\000\002\077\002\000\002\053\005\000\002\054\003" +
    "\000\002\055\005\000\002\055\005\000\002\055\004\000" +
    "\002\037\003\000\002\064\003\000\002\064\002\000\002" +
    "\065\005\000\002\065\003\000\002\060\005\000\002\060" +
    "\004\000\002\060\003\000\002\057\005\000\002\057\003" +
    "\000\002\061\006\000\002\061\003\000\002\061\003\000" +
    "\002\061\003\000\002\061\003\000\002\061\004\000\002" +
    "\061\007\000\002\061\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\003\000\002\035\003\000\002\034\005" +
    "\000\002\034\003\000\002\036\003\000\002\036\005\000" +
    "\002\036\004\000\002\036\005\000\002\051\003\000\002" +
    "\051\003\000\002\051\003\000\002\050\003\000\002\050" +
    "\003\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\043\003\000\002\043\003\000" +
    "\002\044\003\000\002\044\003\000\002\045\003\000\002" +
    "\045\003\000\002\042\003\000\002\042\003\000\002\047" +
    "\003\000\002\047\003\000\002\047\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\344\000\004\004\005\001\002\000\004\002\346\001" +
    "\002\000\004\061\006\001\002\000\012\005\uffff\016\uffff" +
    "\024\uffff\061\uffff\001\002\000\012\005\ufffd\016\ufffd\024" +
    "\ufffd\061\ufffd\001\002\000\012\005\021\016\020\024\012" +
    "\061\014\001\002\000\006\003\ufff1\061\ufff1\001\002\000" +
    "\012\011\uffe0\025\uffe0\061\uffe0\062\uffe0\001\002\000\012" +
    "\005\ufffe\016\ufffe\024\ufffe\061\ufffe\001\002\000\066\003" +
    "\ufff7\006\ufff7\007\ufff7\022\ufff7\023\ufff7\024\ufff7\026\ufff7" +
    "\027\ufff7\031\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\042" +
    "\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7" +
    "\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\061\ufff7\001" +
    "\002\000\012\005\ufffb\016\ufffb\024\ufffb\061\ufffb\001\002" +
    "\000\012\005\ufffa\016\ufffa\024\ufffa\061\ufffa\001\002\000" +
    "\012\005\ufffc\016\ufffc\024\ufffc\061\ufffc\001\002\000\004" +
    "\061\037\001\002\000\004\061\014\001\002\000\004\061" +
    "\ufff9\001\002\000\004\061\025\001\002\000\006\006\034" +
    "\007\033\001\002\000\004\035\027\001\002\000\006\006" +
    "\ufff5\007\ufff5\001\002\000\010\060\030\063\032\064\031" +
    "\001\002\000\006\006\ufff4\007\ufff4\001\002\000\006\006" +
    "\ufff2\007\ufff2\001\002\000\006\006\ufff3\007\ufff3\001\002" +
    "\000\004\061\025\001\002\000\012\005\ufff8\016\ufff8\024" +
    "\ufff8\061\ufff8\001\002\000\006\006\ufff6\007\ufff6\001\002" +
    "\000\006\010\042\024\041\001\002\000\006\010\uffe4\024" +
    "\uffe4\001\002\000\012\005\uffe6\016\uffe6\024\uffe6\061\uffe6" +
    "\001\002\000\010\024\uffe7\025\uffe7\061\uffe7\001\002\000" +
    "\004\061\014\001\002\000\004\024\041\001\002\000\012" +
    "\005\uffe5\016\uffe5\024\uffe5\061\uffe5\001\002\000\010\024" +
    "\046\025\050\061\014\001\002\000\012\011\uffe0\025\uffe0" +
    "\061\uffe0\062\uffe0\001\002\000\010\024\uffe8\025\uffe8\061" +
    "\uffe8\001\002\000\012\005\uffe3\016\uffe3\024\uffe3\061\uffe3" +
    "\001\002\000\012\011\054\025\055\061\014\062\060\001" +
    "\002\000\004\061\063\001\002\000\004\061\uffdd\001\002" +
    "\000\006\061\014\062\060\001\002\000\004\025\061\001" +
    "\002\000\012\011\uffde\025\uffde\061\uffde\062\uffde\001\002" +
    "\000\012\011\uffe1\025\uffe1\061\uffe1\062\uffe1\001\002\000" +
    "\004\061\uffdc\001\002\000\012\005\uffe2\016\uffe2\024\uffe2" +
    "\061\uffe2\001\002\000\012\011\uffdf\025\uffdf\061\uffdf\062" +
    "\uffdf\001\002\000\004\030\uffdb\001\002\000\004\030\065" +
    "\001\002\000\006\031\uffd6\061\014\001\002\000\006\007" +
    "\326\031\uffd7\001\002\000\006\003\322\061\323\001\002" +
    "\000\004\031\072\001\002\000\006\007\uffd4\031\uffd4\001" +
    "\002\000\006\024\uffe7\061\uffe7\001\002\000\006\024\074" +
    "\061\014\001\002\000\032\003\uffda\006\uffda\013\uffda\014" +
    "\uffda\015\uffda\017\uffda\020\uffda\024\uffda\025\uffda\032\uffda" +
    "\056\uffda\061\uffda\001\002\000\032\003\uffcf\006\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\017\uffcf\020\uffcf\024\uffcf\025\uffcf" +
    "\032\uffcf\056\uffcf\061\uffcf\001\002\000\032\003\111\006" +
    "\uffb2\013\115\014\117\015\114\017\077\020\112\024\100" +
    "\025\uffd9\032\103\056\106\061\101\001\002\000\004\030" +
    "\316\001\002\000\032\003\uffcf\006\uffcf\013\uffcf\014\uffcf" +
    "\015\uffcf\017\uffcf\020\uffcf\024\uffcf\025\uffcf\032\uffcf\056" +
    "\uffcf\061\uffcf\001\002\000\074\003\uffae\006\uffae\007\uffae" +
    "\012\uffae\022\uffae\023\uffae\026\uffae\027\uffae\030\uffae\031" +
    "\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae" +
    "\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae\047" +
    "\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae" +
    "\001\002\000\004\025\313\001\002\000\004\030\uffc9\001" +
    "\002\000\024\030\273\033\271\034\272\035\270\046\142" +
    "\047\145\053\154\054\155\055\163\001\002\000\032\003" +
    "\uffcd\006\uffcd\013\uffcd\014\uffcd\015\uffcd\017\uffcd\020\uffcd" +
    "\024\uffcd\025\uffcd\032\uffcd\056\uffcd\061\uffcd\001\002\000" +
    "\004\030\221\001\002\000\032\003\uffd0\006\uffd0\013\uffd0" +
    "\014\uffd0\015\uffd0\017\uffd0\020\uffd0\024\uffd0\025\uffd0\032" +
    "\uffd0\056\uffd0\061\uffd0\001\002\000\004\006\220\001\002" +
    "\000\006\006\uffb3\031\uffb3\001\002\000\004\030\210\001" +
    "\002\000\032\003\uffce\006\uffce\013\uffce\014\uffce\015\uffce" +
    "\017\uffce\020\uffce\024\uffce\025\uffce\032\uffce\056\uffce\061" +
    "\uffce\001\002\000\022\006\206\021\131\030\140\045\127" +
    "\060\136\061\101\063\134\064\133\001\002\000\004\006" +
    "\204\001\002\000\074\003\uffb1\006\uffb1\007\uffb1\012\uffb0" +
    "\022\uffb1\023\uffb1\026\uffb0\027\uffb1\030\uffb1\031\uffb1\033" +
    "\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1" +
    "\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050" +
    "\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\001\002" +
    "\000\004\006\120\001\002\000\034\003\uffc4\006\uffc4\013" +
    "\uffc4\014\uffc4\015\uffc4\017\uffc4\020\uffc4\024\uffc4\025\uffc4" +
    "\032\uffc4\056\uffc4\057\uffc4\061\uffc4\001\002\000\006\012" +
    "\125\026\122\001\002\000\022\003\202\021\uffaa\030\uffaa" +
    "\045\uffaa\060\uffaa\061\uffaa\063\uffaa\064\uffaa\001\002\000" +
    "\070\003\uffaf\006\uffaf\007\uffaf\022\uffaf\023\uffaf\027\uffaf" +
    "\030\uffaf\031\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037" +
    "\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf" +
    "\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054" +
    "\uffaf\055\uffaf\001\002\000\020\021\131\030\140\045\127" +
    "\060\136\061\101\063\134\064\133\001\002\000\004\061" +
    "\126\001\002\000\070\003\uffab\006\uffab\007\uffab\022\uffab" +
    "\023\uffab\027\uffab\030\uffab\031\uffab\033\uffab\034\uffab\035" +
    "\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab" +
    "\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052" +
    "\uffab\053\uffab\054\uffab\055\uffab\001\002\000\016\021\131" +
    "\030\140\060\136\061\101\063\134\064\133\001\002\000" +
    "\014\027\200\044\144\045\146\046\142\047\145\001\002" +
    "\000\004\061\014\001\002\000\062\003\uff9f\006\uff9f\007" +
    "\uff9f\022\uff9f\023\uff9f\027\uff9f\030\165\031\uff9f\036\uff9f" +
    "\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045" +
    "\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f" +
    "\054\uff9f\055\uff9f\001\002\000\060\003\uff9c\006\uff9c\007" +
    "\uff9c\022\uff9c\023\uff9c\027\uff9c\031\uff9c\036\uff9c\037\uff9c" +
    "\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046" +
    "\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c" +
    "\055\uff9c\001\002\000\060\003\uff9d\006\uff9d\007\uff9d\022" +
    "\uff9d\023\uff9d\027\uff9d\031\uff9d\036\uff9d\037\uff9d\040\uff9d" +
    "\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047" +
    "\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d" +
    "\001\002\000\060\003\uffa3\006\uffa3\007\uffa3\022\uffa3\023" +
    "\uffa3\027\uffa3\031\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3" +
    "\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050" +
    "\162\051\157\052\156\053\154\054\155\055\163\001\002" +
    "\000\060\003\uff9e\006\uff9e\007\uff9e\022\uff9e\023\uff9e\027" +
    "\uff9e\031\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e" +
    "\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051" +
    "\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\001\002\000\060" +
    "\003\uffa1\006\uffa1\007\uffa1\022\uffa1\023\uffa1\027\uffa1\031" +
    "\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1" +
    "\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052" +
    "\uffa1\053\uffa1\054\uffa1\055\uffa1\001\002\000\020\021\131" +
    "\030\140\045\127\060\136\061\101\063\134\064\133\001" +
    "\002\000\014\031\143\044\144\045\146\046\142\047\145" +
    "\001\002\000\022\003\uff81\021\uff81\030\uff81\045\uff81\060" +
    "\uff81\061\uff81\063\uff81\064\uff81\001\002\000\060\003\uff99" +
    "\006\uff99\007\uff99\022\uff99\023\uff99\027\uff99\031\uff99\036" +
    "\uff99\037\uff99\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99" +
    "\045\uff99\046\uff99\047\uff99\050\uff99\051\uff99\052\uff99\053" +
    "\uff99\054\uff99\055\uff99\001\002\000\016\021\uff83\030\uff83" +
    "\060\uff83\061\uff83\063\uff83\064\uff83\001\002\000\022\003" +
    "\uff80\021\uff80\030\uff80\045\uff80\060\uff80\061\uff80\063\uff80" +
    "\064\uff80\001\002\000\016\021\uff82\030\uff82\060\uff82\061" +
    "\uff82\063\uff82\064\uff82\001\002\000\016\021\uff84\030\uff84" +
    "\060\uff84\061\uff84\063\uff84\064\uff84\001\002\000\016\021" +
    "\131\030\140\060\136\061\101\063\134\064\133\001\002" +
    "\000\016\021\uff85\030\uff85\060\uff85\061\uff85\063\uff85\064" +
    "\uff85\001\002\000\060\003\uffa5\006\uffa5\007\uffa5\022\uffa5" +
    "\023\uffa5\027\uffa5\031\uffa5\036\uffa5\037\uffa5\040\uffa5\041" +
    "\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5" +
    "\050\162\051\157\052\156\053\154\054\155\055\163\001" +
    "\002\000\016\021\uff7e\030\uff7e\060\uff7e\061\uff7e\063\uff7e" +
    "\064\uff7e\001\002\000\022\003\uff7a\021\uff7a\030\uff7a\045" +
    "\uff7a\060\uff7a\061\uff7a\063\uff7a\064\uff7a\001\002\000\022" +
    "\003\uff79\021\uff79\030\uff79\045\uff79\060\uff79\061\uff79\063" +
    "\uff79\064\uff79\001\002\000\016\021\uff7b\030\uff7b\060\uff7b" +
    "\061\uff7b\063\uff7b\064\uff7b\001\002\000\016\021\uff7c\030" +
    "\uff7c\060\uff7c\061\uff7c\063\uff7c\064\uff7c\001\002\000\016" +
    "\021\131\030\140\060\136\061\101\063\134\064\133\001" +
    "\002\000\016\021\uff7f\030\uff7f\060\uff7f\061\uff7f\063\uff7f" +
    "\064\uff7f\001\002\000\016\021\uff7d\030\uff7d\060\uff7d\061" +
    "\uff7d\063\uff7d\064\uff7d\001\002\000\022\003\uff78\021\uff78" +
    "\030\uff78\045\uff78\060\uff78\061\uff78\063\uff78\064\uff78\001" +
    "\002\000\060\003\uffa2\006\uffa2\007\uffa2\022\uffa2\023\uffa2" +
    "\027\uffa2\031\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042" +
    "\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2" +
    "\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\001\002\000" +
    "\022\021\131\030\140\031\uffa8\045\127\060\136\061\101" +
    "\063\134\064\133\001\002\000\006\007\172\031\uffa9\001" +
    "\002\000\016\007\uffa6\031\uffa6\044\144\045\146\046\142" +
    "\047\145\001\002\000\004\031\171\001\002\000\060\003" +
    "\uffa0\006\uffa0\007\uffa0\022\uffa0\023\uffa0\027\uffa0\031\uffa0" +
    "\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044" +
    "\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0" +
    "\053\uffa0\054\uffa0\055\uffa0\001\002\000\020\021\131\030" +
    "\140\045\127\060\136\061\101\063\134\064\133\001\002" +
    "\000\016\007\uffa7\031\uffa7\044\144\045\146\046\142\047" +
    "\145\001\002\000\062\003\uff9b\006\uff9b\007\uff9b\022\uff9b" +
    "\023\uff9b\026\175\027\uff9b\031\uff9b\036\uff9b\037\uff9b\040" +
    "\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b" +
    "\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b\055" +
    "\uff9b\001\002\000\020\021\131\030\140\045\127\060\136" +
    "\061\101\063\134\064\133\001\002\000\014\027\177\044" +
    "\144\045\146\046\142\047\145\001\002\000\060\003\uff9a" +
    "\006\uff9a\007\uff9a\022\uff9a\023\uff9a\027\uff9a\031\uff9a\036" +
    "\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a" +
    "\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053" +
    "\uff9a\054\uff9a\055\uff9a\001\002\000\070\003\uffad\006\uffad" +
    "\007\uffad\022\uffad\023\uffad\027\uffad\030\uffad\031\uffad\033" +
    "\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad" +
    "\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050" +
    "\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad\001\002" +
    "\000\060\003\uffa4\006\uffa4\007\uffa4\022\uffa4\023\uffa4\027" +
    "\uffa4\031\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4" +
    "\043\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050\162\051" +
    "\157\052\156\053\154\054\155\055\163\001\002\000\004" +
    "\027\203\001\002\000\070\003\uffac\006\uffac\007\uffac\022" +
    "\uffac\023\uffac\027\uffac\030\uffac\031\uffac\033\uffac\034\uffac" +
    "\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043" +
    "\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051\uffac" +
    "\052\uffac\053\uffac\054\uffac\055\uffac\001\002\000\034\003" +
    "\uffc3\006\uffc3\013\uffc3\014\uffc3\015\uffc3\017\uffc3\020\uffc3" +
    "\024\uffc3\025\uffc3\032\uffc3\056\uffc3\057\uffc3\061\uffc3\001" +
    "\002\000\014\006\207\044\144\045\146\046\142\047\145" +
    "\001\002\000\034\003\uffc2\006\uffc2\013\uffc2\014\uffc2\015" +
    "\uffc2\017\uffc2\020\uffc2\024\uffc2\025\uffc2\032\uffc2\056\uffc2" +
    "\057\uffc2\061\uffc2\001\002\000\034\003\uffc1\006\uffc1\013" +
    "\uffc1\014\uffc1\015\uffc1\017\uffc1\020\uffc1\024\uffc1\025\uffc1" +
    "\032\uffc1\056\uffc1\057\uffc1\061\uffc1\001\002\000\020\021" +
    "\131\030\140\045\127\060\136\061\101\063\134\064\133" +
    "\001\002\000\016\007\212\031\213\044\144\045\146\046" +
    "\142\047\145\001\002\000\004\060\215\001\002\000\004" +
    "\006\214\001\002\000\034\003\uffbf\006\uffbf\013\uffbf\014" +
    "\uffbf\015\uffbf\017\uffbf\020\uffbf\024\uffbf\025\uffbf\032\uffbf" +
    "\056\uffbf\057\uffbf\061\uffbf\001\002\000\004\031\216\001" +
    "\002\000\004\006\217\001\002\000\034\003\uffbe\006\uffbe" +
    "\013\uffbe\014\uffbe\015\uffbe\017\uffbe\020\uffbe\024\uffbe\025" +
    "\uffbe\032\uffbe\056\uffbe\057\uffbe\061\uffbe\001\002\000\034" +
    "\003\uffc5\006\uffc5\013\uffc5\014\uffc5\015\uffc5\017\uffc5\020" +
    "\uffc5\024\uffc5\025\uffc5\032\uffc5\056\uffc5\057\uffc5\061\uffc5" +
    "\001\002\000\022\003\225\021\131\030\140\045\127\060" +
    "\136\061\101\063\134\064\133\001\002\000\012\006\uff93" +
    "\022\uff93\023\uff93\031\uff93\001\002\000\040\003\260\006" +
    "\uff92\022\uff92\023\uff92\031\uff92\036\256\037\253\040\255" +
    "\041\254\042\261\043\262\044\144\045\146\046\142\047" +
    "\145\001\002\000\004\031\243\001\002\000\004\031\237" +
    "\001\002\000\012\006\uff95\022\uff95\023\235\031\uff95\001" +
    "\002\000\010\006\uffba\022\231\031\uffba\001\002\000\010" +
    "\006\uff96\022\uff96\031\uff96\001\002\000\022\003\234\021" +
    "\131\030\140\045\127\060\136\061\101\063\134\064\133" +
    "\001\002\000\006\006\uffbb\031\uffbb\001\002\000\010\006" +
    "\uff98\022\uff98\031\uff98\001\002\000\010\006\uff97\022\uff97" +
    "\031\uff97\001\002\000\020\021\131\030\140\045\127\060" +
    "\136\061\101\063\134\064\133\001\002\000\012\006\uff94" +
    "\022\uff94\023\uff94\031\uff94\001\002\000\024\003\111\006" +
    "\uffb2\013\115\014\117\015\114\017\077\020\112\024\100" +
    "\061\101\001\002\000\004\057\241\001\002\000\030\003" +
    "\111\006\uffb2\013\115\014\117\015\114\017\077\020\112" +
    "\024\100\032\103\056\106\061\101\001\002\000\032\003" +
    "\uffca\006\uffca\013\uffca\014\uffca\015\uffca\017\uffca\020\uffca" +
    "\024\uffca\025\uffca\032\uffca\056\uffca\061\uffca\001\002\000" +
    "\030\003\111\006\uffb2\013\115\014\117\015\114\017\077" +
    "\020\112\024\100\032\103\056\106\061\101\001\002\000" +
    "\032\003\uffbc\006\uffbc\013\uffbc\014\uffbc\015\uffbc\017\uffbc" +
    "\020\uffbc\024\uffbc\025\uffbc\032\uffbc\056\uffbc\061\uffbc\001" +
    "\002\000\034\003\uffce\006\uffce\013\uffce\014\uffce\015\uffce" +
    "\017\uffce\020\uffce\024\uffce\025\uffce\032\uffce\056\uffce\057" +
    "\246\061\uffce\001\002\000\030\003\uffb9\006\uffb9\013\uffb9" +
    "\014\uffb9\015\uffb9\017\uffb9\020\uffb9\024\uffb9\032\uffb9\056" +
    "\uffb9\061\uffb9\001\002\000\030\003\111\006\uffb2\013\115" +
    "\014\117\015\114\017\077\020\112\024\100\032\103\056" +
    "\106\061\101\001\002\000\032\003\uffbc\006\uffbc\013\uffbc" +
    "\014\uffbc\015\uffbc\017\uffbc\020\uffbc\024\uffbc\025\uffbc\032" +
    "\uffbc\056\uffbc\061\uffbc\001\002\000\032\003\uffcb\006\uffcb" +
    "\013\uffcb\014\uffcb\015\uffcb\017\uffcb\020\uffcb\024\uffcb\025" +
    "\uffcb\032\uffcb\056\uffcb\061\uffcb\001\002\000\032\003\uffcc" +
    "\006\uffcc\013\uffcc\014\uffcc\015\uffcc\017\uffcc\020\uffcc\024" +
    "\uffcc\025\uffcc\032\uffcc\056\uffcc\061\uffcc\001\002\000\022" +
    "\003\uff8a\021\uff8a\030\uff8a\045\uff8a\060\uff8a\061\uff8a\063" +
    "\uff8a\064\uff8a\001\002\000\022\003\uff88\021\uff88\030\uff88" +
    "\045\uff88\060\uff88\061\uff88\063\uff88\064\uff88\001\002\000" +
    "\022\003\uff89\021\uff89\030\uff89\045\uff89\060\uff89\061\uff89" +
    "\063\uff89\064\uff89\001\002\000\022\003\uff8b\021\uff8b\030" +
    "\uff8b\045\uff8b\060\uff8b\061\uff8b\063\uff8b\064\uff8b\001\002" +
    "\000\022\003\264\021\131\030\140\045\127\060\136\061" +
    "\101\063\134\064\133\001\002\000\012\006\uff90\022\uff90" +
    "\023\uff90\031\uff90\001\002\000\022\003\uff87\021\uff87\030" +
    "\uff87\045\uff87\060\uff87\061\uff87\063\uff87\064\uff87\001\002" +
    "\000\022\003\uff86\021\uff86\030\uff86\045\uff86\060\uff86\061" +
    "\uff86\063\uff86\064\uff86\001\002\000\022\006\uff91\022\uff91" +
    "\023\uff91\031\uff91\044\144\045\146\046\142\047\145\001" +
    "\002\000\012\006\uff8f\022\uff8f\023\uff8f\031\uff8f\001\002" +
    "\000\022\003\uff8c\021\uff8c\030\uff8c\045\uff8c\060\uff8c\061" +
    "\uff8c\063\uff8c\064\uff8c\001\002\000\022\003\uff8d\021\uff8d" +
    "\030\uff8d\045\uff8d\060\uff8d\061\uff8d\063\uff8d\064\uff8d\001" +
    "\002\000\022\003\277\021\131\030\140\045\127\060\136" +
    "\061\101\063\134\064\133\001\002\000\022\003\uff8e\021" +
    "\uff8e\030\uff8e\045\uff8e\060\uff8e\061\uff8e\063\uff8e\064\uff8e" +
    "\001\002\000\006\006\uffb5\031\uffb5\001\002\000\006\006" +
    "\uffb4\031\uffb4\001\002\000\022\021\131\030\140\031\uffa8" +
    "\045\127\060\136\061\101\063\134\064\133\001\002\000" +
    "\004\031\275\001\002\000\006\006\uffb6\031\uffb6\001\002" +
    "\000\016\006\uffb8\031\uffb8\044\144\045\146\046\142\047" +
    "\145\001\002\000\006\006\uffb7\031\uffb7\001\002\000\004" +
    "\030\301\001\002\000\010\003\111\006\uffb2\061\101\001" +
    "\002\000\004\006\303\001\002\000\020\021\uffc8\030\uffc8" +
    "\045\uffc8\060\uffc8\061\uffc8\063\uffc8\064\uffc8\001\002\000" +
    "\020\021\131\030\140\045\127\060\136\061\101\063\134" +
    "\064\133\001\002\000\004\006\uffc7\001\002\000\004\006" +
    "\307\001\002\000\010\003\111\031\uffb2\061\101\001\002" +
    "\000\004\031\311\001\002\000\024\003\111\006\uffb2\013" +
    "\115\014\117\015\114\017\077\020\112\024\100\061\101" +
    "\001\002\000\032\003\uffc6\006\uffc6\013\uffc6\014\uffc6\015" +
    "\uffc6\017\uffc6\020\uffc6\024\uffc6\025\uffc6\032\uffc6\056\uffc6" +
    "\061\uffc6\001\002\000\012\011\uffd8\025\uffd8\061\uffd8\062" +
    "\uffd8\001\002\000\032\003\111\006\uffb2\013\115\014\117" +
    "\015\114\017\077\020\112\024\100\025\315\032\103\056" +
    "\106\061\101\001\002\000\034\003\uffbd\006\uffbd\013\uffbd" +
    "\014\uffbd\015\uffbd\017\uffbd\020\uffbd\024\uffbd\025\uffbd\032" +
    "\uffbd\056\uffbd\057\uffbd\061\uffbd\001\002\000\004\061\101" +
    "\001\002\000\004\031\320\001\002\000\004\006\321\001" +
    "\002\000\034\003\uffc0\006\uffc0\013\uffc0\014\uffc0\015\uffc0" +
    "\017\uffc0\020\uffc0\024\uffc0\025\uffc0\032\uffc0\056\uffc0\057" +
    "\uffc0\061\uffc0\001\002\000\006\007\uffd1\031\uffd1\001\002" +
    "\000\010\007\uffd3\026\324\031\uffd3\001\002\000\004\027" +
    "\325\001\002\000\006\007\uffd2\031\uffd2\001\002\000\004" +
    "\061\014\001\002\000\006\007\uffd5\031\uffd5\001\002\000" +
    "\012\011\054\025\331\061\014\062\060\001\002\000\004" +
    "\002\001\001\002\000\006\003\334\061\336\001\002\000" +
    "\006\006\343\007\342\001\002\000\020\005\uffee\006\uffe9" +
    "\007\uffe9\016\uffee\024\uffee\025\uffee\061\uffee\001\002\000" +
    "\006\006\uffec\007\uffec\001\002\000\010\006\uffeb\007\uffeb" +
    "\026\340\001\002\000\014\005\ufff0\016\ufff0\024\ufff0\025" +
    "\ufff0\061\ufff0\001\002\000\004\027\341\001\002\000\006" +
    "\006\uffea\007\uffea\001\002\000\006\003\344\061\336\001" +
    "\002\000\014\005\uffef\016\uffef\024\uffef\025\uffef\061\uffef" +
    "\001\002\000\006\006\uffe9\007\uffe9\001\002\000\006\006" +
    "\uffed\007\uffed\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\344\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\052\006\001\001\000\002\001\001\000\004\003\007" +
    "\001\001\000\014\004\012\005\016\010\014\013\015\056" +
    "\010\001\001\000\004\070\331\001\001\000\004\016\327" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\063\035" +
    "\001\001\000\004\056\021\001\001\000\004\067\022\001" +
    "\001\000\006\006\023\007\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\044\001\001\000\004\056\042\001\001\000" +
    "\004\026\043\001\001\000\002\001\001\000\006\010\046" +
    "\056\010\001\001\000\004\016\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\015\056\017\055\056\052" +
    "\062\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\061\056\052\062\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\071\063\001\001" +
    "\000\002\001\001\000\012\020\067\021\065\022\070\056" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\072\001\001\000" +
    "\006\010\046\056\010\001\001\000\004\072\074\001\001" +
    "\000\004\023\075\001\001\000\020\024\106\025\107\040" +
    "\112\041\104\053\103\054\115\073\101\001\001\000\002" +
    "\001\001\000\004\023\313\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\074\277\001\001\000\010\045\265" +
    "\046\264\051\266\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\053\131\054" +
    "\115\057\134\060\204\061\136\001\001\000\002\001\001" +
    "\000\004\077\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\037\123\055\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\053\131\054\115\057\134\060" +
    "\127\061\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\053\131\054\115\057\200\061\136\001\001\000" +
    "\010\043\147\044\150\045\146\001\001\000\004\056\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\042\157\046\152\047\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\053\131\054\115\057" +
    "\134\060\140\061\136\001\001\000\010\043\147\044\150" +
    "\045\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\053\131\054\115\057\151\061\136\001" +
    "\001\000\002\001\001\000\010\042\157\046\152\047\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\053\131" +
    "\054\115\061\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\053\131" +
    "\054\115\057\134\060\166\061\136\064\167\065\165\001" +
    "\001\000\002\001\001\000\010\043\147\044\150\045\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\053" +
    "\131\054\115\057\134\060\172\061\136\001\001\000\010" +
    "\043\147\044\150\045\146\001\001\000\002\001\001\000" +
    "\014\053\131\054\115\057\134\060\175\061\136\001\001" +
    "\000\010\043\147\044\150\045\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\042\157\046\152\047\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\043\147\044\150\045\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\053\131\054\115\057" +
    "\134\060\210\061\136\001\001\000\010\043\147\044\150" +
    "\045\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\027\226\033\223\034" +
    "\225\035\227\036\221\053\131\054\115\057\134\060\222" +
    "\061\136\001\001\000\002\001\001\000\012\043\147\044" +
    "\150\045\146\050\256\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\231\001\001\000" +
    "\002\001\001\000\022\034\225\035\232\036\221\053\131" +
    "\054\115\057\134\060\222\061\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\036\235" +
    "\053\131\054\115\057\134\060\222\061\136\001\001\000" +
    "\002\001\001\000\012\025\107\040\237\053\103\054\115" +
    "\001\001\000\002\001\001\000\016\024\241\025\107\040" +
    "\112\041\104\053\103\054\115\001\001\000\002\001\001" +
    "\000\016\024\243\025\107\040\244\041\104\053\103\054" +
    "\115\001\001\000\004\030\251\001\001\000\002\001\001" +
    "\000\004\031\246\001\001\000\016\024\247\025\107\040" +
    "\112\041\104\053\103\054\115\001\001\000\004\030\250" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\053\131\054\115\057\134\060\262\061\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\043\147\044\150\045\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\053\131" +
    "\054\115\057\134\060\275\061\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\053\131" +
    "\054\115\057\134\060\166\061\136\064\273\065\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\043\147" +
    "\044\150\045\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\025\301\053\103\054\115\001\001\000\002" +
    "\001\001\000\004\075\303\001\001\000\026\027\226\033" +
    "\304\034\225\035\227\036\221\053\131\054\115\057\134" +
    "\060\222\061\136\001\001\000\004\076\305\001\001\000" +
    "\002\001\001\000\010\025\307\053\103\054\115\001\001" +
    "\000\002\001\001\000\012\025\107\040\311\053\103\054" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\024\106\025\107\040\112\041\104\053\103\054\115\001" +
    "\001\000\002\001\001\000\006\053\316\054\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\022\326\056\066\001\001\000\002\001" +
    "\001\000\012\015\056\017\055\056\052\062\051\001\001" +
    "\000\002\001\001\000\010\011\332\014\336\066\334\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\066\344\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	Tab.init(); //pravi universe opseg
	
// ovde ubacujem string i bool
	
	Tab.insert(Obj.Type, "bool", new Struct(Struct.Bool));
	Tab.insert(Obj.Type, "string", new Struct(Struct.Array, Tab.charType));

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }


	
    int globalVarsCount = 0;
    int localVarsCount = 0;
    int globalVarDef = 0;
    int localVarDef = 0;
    int globalConstDef = 0;
    int globalArrDecl = 0;
   	int staticInnerMethods = 0;
    int StatementBlocks = 0;
    int MainMethodCalls = 0;
    int FormalMethodArgs = 0;
    int InnerClassDef = 0;
    int InnerMethodsDef = 0;
    int InnerFieldsDecl = 0;
    boolean errorDetected  = false;
    
    StringBuilder output = new StringBuilder();
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


	Struct currentType = null;
	Obj currentMethod = null;
	Obj mainMethod = null;
	boolean currentClass = false;
	boolean isNiz=false;
	Struct curExpr = null;
	Obj newOp = null;
	Scope mainScope = null;
	Scope scope = null;
	boolean returnFound = false; // da bi se proverilo da li metoda ima return iskaz
	Stack<Obj> operStack = new Stack();
	Stack<Integer> indeksi = new Stack();
	Stack<Obj> adrese = new Stack();
	
	boolean poziv = false;
	Hashtable<String, LinkedList<Obj>> formPars = new Hashtable<String, LinkedList<Obj>>(); 
	Hashtable<String, Scope> opsezi = new Hashtable<String, Scope>(); 
	LinkedList<Obj> params = null;
	LinkedList<Struct> actParams = null;
	
	Stack<Integer> and_stack = new Stack<Integer>();
	Stack<Integer> or_stack = new Stack<Integer>();
	Stack<Integer> adr_stack = new Stack<Integer>();
	
	Stack<Integer> for_stack = new Stack<Integer>();
	int contAdr;
	
	int adresa;
	boolean isFor = false;
	int varOffset = 0;
	Obj design = null;
	
	boolean inMainMethod(Obj o){
		if(mainScope!= null){
			Obj o1 = mainScope.findSymbol(o.getName());
			if(o1!= null) return true;
		}
		return false;
	}
	boolean slazuSeParametri(String name){
		LinkedList<Obj> pom = formPars.get(name);
		boolean flag = true;
		if(pom!= null){
			ListIterator<Obj> it1 = pom.listIterator(0);
			ListIterator<Struct> it2 = actParams.listIterator(0);
			Struct prvi = actParams.peek();
			if(name.equals("chr")){
				if(prvi.getKind() != Struct.Int)
					parser.report_error("Instrukcija chr moze da se pozove samo sa argumentom tipa int!",null);
			}else if(name.equals("ord")){
				if(prvi.getKind() != Struct.Char)
					parser.report_error("Instrukcija ord moze da se pozove samo sa argumentom tipa char!",null);
			}else if(name.equals("len")){
				if(prvi.getKind() != Struct.Array)
					parser.report_error("Greska: Instrukcija len moze da se pozove samo sa argumentom koji je niz!",null);
			}else{
				if(pom.size() == actParams.size()){
					Obj o;
					Struct o1;
					for(o = it1.next(), o1 = it2.next(); it1.hasNext() !=false && it2.hasNext() != false;o = it1.next(), o1 = it2.next())
							if(o.getType() != o1){
								flag = true;
								break;
							}
					if(it1.hasNext() == true || it2.hasNext()==true)
						flag = false;
				}else{
					flag = false;
				}
		
				//formPars.put(name, pom);
				
			}
		}
		actParams.clear();
			return flag;
	}
	
	
	void podesiFormalneParametre(String name){
		//na steku su stvarni parametri - treba ih dodeliti formalnim
		
		LinkedList<Obj> pom = formPars.get(name);
		if(pom != null){
			Iterator<Obj> it1 = pom.descendingIterator();
			parser.report_info("Imamo " + pom.size() + " parametara!", null);
			Scope s = opsezi.get(name);
			Obj o, o1;
			int i = 0;
			for(;i<pom.size();i++)
			{	
				o = it1.next();
				parser.report_info("Popunjava se formalni parametar " + o.getName(), null);
				o1 = s.getLocals().searchKey(o.getName());
				if(o1 != null)
					Code.store(o1);	//smesti vrednost u o1
			}
		}
		
	}
	boolean formalniParametar(Obj obj){
		LinkedList<Obj> pom = formPars.get(currentMethod.getName());
		boolean flag = false;
		ListIterator<Obj> it1 = pom.listIterator(0);
			Obj o;
			for(o = it1.next();it1.hasNext() !=false ;o = it1.next())
					if(o.getName() == obj.getName() && o.getLevel() == obj.getLevel()){
						flag = true;
						break;
					}
		return flag;
	}
	
	String podesitype(Obj o){
		String s = "";
		switch(o.getType().getKind()){
			case 0: s+= "void"; break;
			case 1: s+= "Int";break;
			case 2:	s+= "char";break;
			case 3: s+= "Arr of ";
					switch(o.getType().getElemType().getKind()){
						case 1: s+= "Int"; break;
						case 2:	s+= "char"; break;
						case 4: s+= "Class " + o.getName(); break;
						case 5: s+= "Bool"; break;
						
					}
					break;
			case 4: s+= "Class " + o.getName(); break;
			case 5: s+= "Bool"; break;
		}
		return s;
	}
	void popuniFunkcije(){
		if(params == null){
    		params= new LinkedList<Obj>();
    		params.add(Tab.chrObj);
    	}
    	formPars.put("chr", params);
    	params = null;
    	
    	if(params == null){
    		params= new LinkedList<Obj>();
    		params.add(Tab.ordObj);
    	}
    	formPars.put("ord", params);
    	params = null;
    	if(params == null){
    		params= new LinkedList<Obj>();
    		params.add(Tab.lenObj);
    	}
    	formPars.put("len", params);
    	params = null;
	}

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // MulopRight ::= MODEQ 
            {
              Integer RESULT =null;
		
				RESULT = 10;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // MulopRight ::= DIVEQ 
            {
              Integer RESULT =null;
		
				RESULT = 9;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // MulopRight ::= MULEQ 
            {
              Integer RESULT =null;
		
				RESULT = 8;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // MulopLeft ::= MOD 
            {
              Integer RESULT =null;
		
				RESULT = Code.rem;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // MulopLeft ::= DIV 
            {
              Integer RESULT =null;
		
				RESULT = Code.div;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // MulopLeft ::= MUL 
            {
              Integer RESULT =null;
		
				RESULT = Code.mul;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Mulop ::= MulopRight 
            {
              Integer RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			RESULT = op;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Mulop ::= MulopLeft 
            {
              Integer RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			RESULT = op;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // AddopRight ::= MINUSEQ 
            {
              Integer RESULT =null;
		
			 	RESULT = 7;
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // AddopRight ::= PLUSEQ 
            {
              Integer RESULT =null;
		
				
				RESULT = 6;;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // AddopLeft ::= MINUS 
            {
              Integer RESULT =null;
		
				RESULT = Code.sub;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // AddopLeft ::= PLUS 
            {
              Integer RESULT =null;
		
				RESULT = Code.add;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Addop ::= AddopRight 
            {
              Integer RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			RESULT = op;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Addop ::= AddopLeft 
            {
              Integer RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			RESULT = op;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Relop ::= ELESS 
            {
              Integer RESULT =null;
		
			RESULT = Code.le;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Relop ::= LESS 
            {
              Integer RESULT =null;
		
			RESULT = Code.lt;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Relop ::= EGRT 
            {
              Integer RESULT =null;
		
			RESULT = Code.ge;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Relop ::= GRT 
            {
              Integer RESULT =null;
		
			RESULT = Code.gt;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Relop ::= NOTEQUAL 
            {
              Integer RESULT =null;
		
			RESULT = Code.ne;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Relop ::= EEQUAL 
            {
              Integer RESULT =null;
		
			RESULT = Code.eq;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Assignop ::= MulopRight 
            {
              Integer RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				RESULT = op;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Assignop ::= AddopRight 
            {
              Integer RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				RESULT = op;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Assignop ::= EQUAL 
            {
              Integer RESULT =null;
		
				RESULT = -1;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CondFact ::= Expr Relop error 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				if(isFor == true)
			 		parser.report_error("Uspesan oporavak od greske na liniji " + rleft +":Izraz unutar for instrukcije nije dobro postavljen", null);
				else
					parser.report_error("Uspesan oporavak od greske na liniji " + rleft +":Izraz unutar if instrukcije nije dobro postavljen", null);
			
			
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CondFact ::= Expr error 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				if(isFor == true)
			 		parser.report_error("Uspesan oporavak od greske na liniji " + rleft +":Izraz unutar for instrukcije nije dobro postavljen", null);
				else
			 		parser.report_error("Uspesan oporavak od greske na liniji " + rleft +":Izraz unutar if instrukcije nije dobro postavljen", null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CondFact ::= Expr Relop Expr 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct t1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t2 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				if(!t1.compatibleWith(t2)) {
		 			parser.report_error("Nekompatibilni tipovi na liniji " + opleft, null);
		 		}
		 		
		 	 	Code.putFalseJump(op, 0); 
		 	 	and_stack.push(Code.pc - 2);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CondFact ::= Expr 
            {
              Object RESULT =null;
		
				Code.loadConst(0);
				Code.putFalseJump(Code.ne, 0);
				and_stack.push(Code.pc - 2);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CondTerm ::= CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CondTerm ::= CondTerm AND CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CondTermFix ::= CondTerm 
            {
              Object RESULT =null;
		
				Code.putJump(0); 
				or_stack.push(Code.pc - 2);
				while(!and_stack.empty())
					Code.fixup(and_stack.pop());
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermFix",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Condition ::= CondTermFix 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Condition ::= Condition OR error 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				if(isFor == true)
			 		parser.report_error("Uspesan oporavak od greske na liniji " + rleft +":Izraz unutar for instrukcije nije dobro postavljen", null);
				else
					parser.report_error("Uspesan oporavak od greske na liniji " + rleft +":Izraz unutar if instrukcije nije dobro postavljen", null);
			
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Condition ::= Condition OR CondTermFix 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Factor ::= LPAREN Expr RPAREN 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				RESULT = t;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Factor ::= NEW Type LSQUARE Expr RSQUARE 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
			
				if(e != Tab.intType){
					RESULT = Tab.noType;
					parser.report_error("Semanticka greska, na liniji " + eleft + ". Broj elementa niza mora biti zadat vrednoscu int.", null);
			 	}else{
			 			Struct s = new Struct(Struct.Array);
			 			s.setElementType(t);
			 			RESULT = s;
			 	}
			 	Code.put(Code.newarray);
				Code.put(currentType == Tab.charType ? 0 : 1);

			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Factor ::= NEW Type 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				if (t.getKind() != Struct.Class) {
					parser.report_error("Semanticka greska, na liniji" + tleft + " tip mora predstavljati unutrasnju klasu.", null); 
					RESULT = Tab.noType;
				}else{
					Code.put(Code.new_);
					Code.put2(t.getNumberOfFields()*4);
					RESULT = t;
				}
				
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Factor ::= BOOLCONST 
            {
              Struct RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				Obj c =Tab.insert(Obj.Con, "",Tab.intType);
				//stavljanje na expr stek
				if(b.booleanValue()){
					c.setAdr(1);
					Code.loadConst(1);
				}
				else{
					c.setAdr(0);
					Code.loadConst(0);
				}
				RESULT = Tab.find("bool").getType();
				
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Factor ::= CHARCONST 
            {
              Struct RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character ch = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				Obj c =Tab.insert(Obj.Con, "",Tab.charType);
				c.setAdr(ch.charValue());	
				//stavljanje na expr stek
				Code.load(c);
				RESULT = Tab.charType;
				
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Factor ::= NUMCONST 
            {
              Struct RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				Obj c =Tab.insert(Obj.Con, "",Tab.intType);
				c.setAdr(i.intValue());	
				//stavljanje na expr stek
				Code.load(c);
				indeksi.push(i);
				RESULT = Tab.intType;
				
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Factor ::= Designator 
            {
              Struct RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				if(d != Tab.noObj){
               		operStack.push(d);
                	Code.load(d);
					RESULT = d.getType(); 
				}else{
					RESULT = Tab.noType;
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Factor ::= Designator LPAREN ActPars RPAREN 
            {
              Struct RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		 
				
				operStack.push(func);
				if(func != Tab.noObj){
					if(Obj.Meth == func.getKind()){
						if(slazuSeParametri(func.getName())){
							parser.report_info("Pronadjen poziv funkcije " + func.getName() + " na liniji " + funcleft, null);
							if(func.getType() == Tab.noType){
								parser.report_error("Semanticka greska " + func.getName()  + " ne moze se koristiti u izrazima jer nema povratnu vrednost, linija " + funcleft, null);
							}
							else{
								if("main".equals(currentMethod.getName()))
										parser.MainMethodCalls++;
								Code.put(Code.call);
								Code.put2(func.getAdr() - Code.pc + 1);
							} 
							RESULT = func.getType();
						}else{
							parser.report_error("Greska na liniji " + funcleft + ": Funkcija "+func.getName() + "je pozvana sa pogresnim parametrima!", null);
						
						}
					}else{
						parser.report_error("Greska na liniji " + funcleft + ": ime "+func.getName() + "nije funkcija!", null);
						RESULT = Tab.noType;
					}
				}else{
					
						parser.report_error("Greska na liniji " + funcleft + ": Funkcija "+func.getName() + "nije deklarisana!", null);
						RESULT = Tab.noType;
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Term ::= Factor 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			 RESULT = t;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Term ::= Term Mulop Factor 
            {
              Struct RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct t1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			if(!t1.compatibleWith(t)) {
		 		parser.report_error("Nekompatibilni tipovi na liniji " + opleft, null);
		 	}
		 	if(t1.getKind() != Struct.Int  || t.getKind() != Struct.Int)
		 		parser.report_error("Semanticka greska na liniji " + opleft +": Tipovi moraju biti int", null);
		 	if(op >= 6 && op <= 10)
			{	
				Obj drugiOp = operStack.pop();
				Obj prviOp = operStack.pop();
				if(prviOp.getKind() != Obj.Var && prviOp.getKind() != Obj.Fld && prviOp.getKind() != Obj.Elem)
					parser.report_error("Greska na liniji " + tleft + ":Objekat mora biti promenljiva, element niza ili polje klase", null);
				else{
					if(prviOp.getKind() == Obj.Elem){
						Obj adresa1 = adrese.pop();
						Obj	adresa2 = adrese.pop();
						Integer indeks1 = indeksi.pop();
						Integer indeks2= indeksi.pop();
						Obj obj = new Obj(Obj.Var, "", design.getType().getElemType());
						Code.store(obj);
						Obj obj1 = new Obj(Obj.Var, "", design.getType().getElemType());
						Code.store(obj1);
						
						Code.load(adresa2);
						Code.loadConst(indeks2);
						Code.load(adresa2);
						Code.loadConst(indeks2);
						Code.put(Code.aload);
						Code.load(adresa1);
						Code.loadConst(indeks1);
						Code.put(Code.aload);
						adrese.push(adresa2);
						indeksi.push(indeks2);
					}
					switch(op){
						case 8:Code.put(Code.mul); break;
						case 9:Code.put(Code.div); break;
						case 10:Code.put(Code.rem); break;
					}
					
					Code.store(prviOp);
					operStack.push(prviOp);
					if(prviOp.getKind() == Obj.Elem){
						Obj adresa = adrese.pop();
						Integer indeks = indeksi.pop();
						Code.load(adresa);
						Code.loadConst(indeks);
						adrese.push(adresa);
						indeksi.push(indeks);
					}
					Code.load(prviOp);
				}
			}else Code.put(op);
			RESULT = t;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= Term 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				RESULT = t;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= MINUS Term 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			if (t != Tab.intType) {
				parser.report_error("Semanticka greska, na liniji " + tleft + ". Iza znaka negacije mora biti tip int.", null);
			}
			Code.put(Code.neg);
			RESULT = t;
			
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= Expr Addop Term 
            {
              Struct RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct te = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				//provera tipa po strukturi a ne po imenu 	ovde dozv samo sabiranje int tipova
			if(te.equals(t) && te== Tab.intType){
					
				if(op >= 6 && op <= 10)
				{	
					Obj drugiOp = operStack.pop();
					Obj prviOp = operStack.pop();
					if(prviOp.getKind() != Obj.Var && prviOp.getKind() != Obj.Fld && prviOp.getKind() != Obj.Elem)
						parser.report_error("Greska na liniji " + tleft + ":Objekat mora biti promenljiva, element niza ili polje klase", null);
					else{
						if(prviOp.getKind() == Obj.Elem){
							Obj adresa1 = adrese.pop();
							Obj	adresa2 = adrese.pop();
							Integer indeks1 = indeksi.pop();
							Integer indeks2= indeksi.pop();
							Obj obj = new Obj(Obj.Var, "", design.getType().getElemType());
							Code.store(obj);
							Obj obj1 = new Obj(Obj.Var, "", design.getType().getElemType());
							Code.store(obj1);
						
							Code.load(adresa2);
							Code.loadConst(indeks2);
							Code.load(adresa2);
							Code.loadConst(indeks2);
							Code.put(Code.aload);
							Code.load(adresa1);
							Code.loadConst(indeks1);
							Code.put(Code.aload);
							adrese.push(adresa2);
							indeksi.push(indeks2);
						}
						switch(op){
							case 6:Code.put(Code.add); break;
							case 7:Code.put(Code.sub); break;
						}
						
						Code.store(prviOp);
						operStack.push(prviOp);
						if(prviOp.getKind() == Obj.Elem){
							Obj adresa = adrese.pop();
							Integer indeks = indeksi.pop();
							Code.load(adresa);
							Code.loadConst(indeks);
							adrese.push(adresa);
							indeksi.push(indeks);
						}
						Code.load(prviOp);
					}
				}
				else
					Code.put(op);
				RESULT = te;
				}
			else{
				parser.report_error("Greska na liniji " + teleft + " : nekompatibilni tipovi u izrazu za sabiranje", null);
				RESULT = Tab.noType;
			}
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ActParsList ::= Expr 
            {
              Stack<Struct> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					if(actParams == null) actParams = new LinkedList<Struct>();
						actParams.add(e);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsList",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ActParsList ::= ActParsList COMMA Expr 
            {
              Stack<Struct> RESULT =null;
		int apleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Stack<Struct> ap = (Stack<Struct>)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					if(actParams == null) actParams = new LinkedList<Struct>();
					actParams.add(e);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsList",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ActPars ::= 
            {
              Stack<Struct> RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ActPars ::= ActParsList 
            {
              Stack<Struct> RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Stack<Struct> op = (Stack<Struct>)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Brace ::= LSQUARE 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				if(design.getType().getKind() != Struct.Array)
				 	parser.report_error("Semanticka greska na liniji" + lleft + ": Objekat nije niz", null); 
				 else{
					 Code.load(design);
					 adrese.push(design);
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Brace",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ArrClass ::= DOT IDENT 
            {
              Obj RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				if(design.getType().getKind() != Struct.Class){
					parser.report_error("Semanticka greska na liniji "+idleft +": Objekat"+design.getName()+" mora biti unutrasnja klasa!",null);
				}else{
					RESULT = design;
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ArrClass",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ArrClass ::= LSQUARE error RSQUARE 
            {
              Obj RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				parser.report_error("Uspesan oporavak od greske na liniji " + rleft + " : Greska u izrazu za indeksiranje niza! ", null);
				RESULT = Tab.noObj;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ArrClass",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ArrClass ::= Brace Expr RSQUARE 
            {
              Obj RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				if(design.getType().getKind() != Struct.Array)
				{
					parser.report_error("Semanticka greska na liniji" + eleft + ": Objekat " + design.getName() + "nije niz", null); 
					RESULT = Tab.noObj;
				}else{
					if( e == Tab.intType){
						
						parser.report_info("Detektovana upotreba clana niza " + design.getName() + " na liniji " + eleft +"!", null); 
						RESULT = new Obj(Obj.Elem, "", design.getType().getElemType());
						
					} else {
						parser.report_error("Semanticka greska na liniji" + eleft + ": Niz se moze indeksirati samo celim brojem", null); 
						RESULT = Tab.noObj;
					}
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ArrClass",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DesignatorID ::= IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					Obj obj = Tab.noObj;
					if(!(name.equals("this"))){
						obj = Tab.find(name);
						if(obj == Tab.noObj)
							parser.report_error("Greska na liniji " + nameleft + " : ime " + name + " nije deklarisano! ", null);
						if(obj.getKind() == Obj.Con)
							parser.output.append("Detektovana upotreba konstante " + obj.getName() +" na liniji " + nameleft +":objektni cvor: " + podesitype(obj) + "," + obj.getAdr() + ","+obj.getLevel() + "\n");
						else if(obj.getKind() == Obj.Var)
							if(obj.getLevel() == 0)
								parser.output.append("Detektovana upotreba globalne promenljive " + obj.getName() +" na liniji " + nameleft +":objektni cvor: " + podesitype(obj) + "," + obj.getAdr() + ","+obj.getLevel()+ "\n");
							else
								parser.output.append("Detektovana upotreba lokalne promenljive " + obj.getName() +" na liniji " + nameleft +":objektni cvor: " + podesitype(obj) + "," + obj.getAdr() + ","+obj.getLevel()+ "\n");
						else if(obj.getKind() == Obj.Elem)
							parser.output.append("Detektovana upotreba clana niza " + obj.getName() +" na liniji " + nameleft +":objektni cvor: " + podesitype(obj) + "," + obj.getAdr() + ","+obj.getLevel()+ "\n");
						else if(obj.getKind() == Obj.Meth)
							parser.output.append("Detektovan poziv metode " + obj.getName() +" na liniji " + nameleft +":objektni cvor: " + podesitype(obj) + "," + obj.getAdr() + ","+obj.getLevel()+ "\n");
						else if(formalniParametar(obj))
							parser.output.append("Detektovana upotreba formalnog parametra " + obj.getName() +"funkcije na liniji " + nameleft +":objektni cvor: " + podesitype(obj) + "," + obj.getAdr() + ","+obj.getLevel()+ "\n");
						
					}
					
					RESULT = obj;
					
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorID",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Designator ::= DesignatorID NT$8 ArrClass 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int didleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int didright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj did = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				isNiz = false;
				RESULT = des;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$8 ::= 
            {
              Obj RESULT =null;
		int didleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int didright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj did = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

				design = did;
				isNiz = true;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$8",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Designator ::= DesignatorID 
            {
              Obj RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				RESULT = des;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DesignatorStatement ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DesignatorStatement ::= error 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							if(isFor == true)
			 					parser.report_error("Uspesan oporavak od greske na liniji " + rleft +":Izraz unutar for instrukcije nije dobro postavljen", null);
			 				else if (isNiz!= true)
			 						parser.report_error("Uspesan oporavak od greske na liniji " + rleft +":Izraz unutar if instrukcije nije dobro postavljen", null);
			 				else
			 						parser.report_error("Uspesan oporavak od greske na liniji " + rleft +":Izraz  za indeksiranje niza nije  dobro postavljen", null);
			 				
			 			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DesignatorStatement ::= Designator DEC 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
							if(o.getType() != Tab.intType || (o.getKind()!= Obj.Var && o.getKind() != Obj.Elem && o.getKind()!= Obj.Fld))
									parser.report_error("Semanticka greska, na liniji" + oleft + ". Promenljiva " + o.getName() + " nije tipa int.", null);
							else{
								//generisi kod
								Code.load(o);
								Code.loadConst(1); // na stek smesti jedan
								Code.put(Code.sub);	//sabei 2 op sa steka
								Code.store(o);
								
							}
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DesignatorStatement ::= Designator INC 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
							if(o.getType() != Tab.intType || (o.getKind()!= Obj.Var && o.getKind() != Obj.Elem && o.getKind()!= Obj.Fld))
									parser.report_error("Semanticka greska, na liniji" + oleft + ". Promenljiva " + o.getName() + " nije tipa int.", null);
							else{
								//generisi kod
								Code.load(o);
								Code.loadConst(1); // na stek smesti jedan
								Code.put(Code.add);	//sabei 2 op sa steka
								Code.store(o);
								
							}
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DesignatorStatement ::= Designator LPAREN ActPars RPAREN 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Stack<Struct> op = (Stack<Struct>)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
						//za metode
							if(func != Tab.noObj){
								if(Obj.Meth == func.getKind()){
									if(slazuSeParametri(func.getName())){
										if("main".equals(currentMethod.getName()))
												parser.MainMethodCalls++;
										
										Code.put(Code.call);
										Code.put2(func.getAdr() - Code.pc + 1);
										parser.report_info("Pronadjen poziv funkcije " + func.getName() + " na liniji " + funcleft, null);
									}else{
										parser.report_error("Greska na liniji " + funcleft + " : Funkcija " + func.getName() + " je pozvana sa pogresnim parametrima", null);
									
									}
								
								}
								else {
									parser.report_error("Greska na liniji " + funcleft + " : ime " + func.getName() + " nije funkcija", null);
									RESULT = Tab.noType;
								}
							}
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DesignatorStatement ::= Designator Assignop error 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							parser.report_info("Uspesan oporavak od greske pri konstrukciji iskaza dodele na liniji: " + rleft, null);
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DesignatorStatement ::= Designator Assignop Expr 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							if(!e.assignableTo(dest.getType()))
								parser.report_error("Greska na liniji "+ destleft +" : nekompatibilni tipovi u dodeli vrednosti", null); 
							else{
								if(dest.getKind() != Obj.Fld && dest.getKind() != Obj.Var && dest.getKind() != Obj.Elem){
									parser.report_error("Semanticka greska na liniji "+destleft +". Operacija je primenljiva samo na promenljivu, element niza ili polje unutar objekta", null); 
								}else{
									//cuvanje vrednosti u globalnu promenljive
									if(dest.getKind() == Obj.Var)
										if(inMainMethod(dest))
											parser.localVarDef++;
										else parser.globalVarDef++;
									if(op>=6){
										Code.load(dest);
										switch(op){
											case 6:Code.put(Code.add); break;
											case 7:Code.put(Code.sub); break;
											case 8:Code.put(Code.mul); break;
											case 9:Code.put(Code.div); break;
											case 10:Code.put(Code.rem); break;
										}
									}
								}
								
								Code.store(dest);
							}
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DummyFixed ::= 
            {
              Object RESULT =null;
		
					int adr = adr_stack.pop();
					Code.putJump(0);
					adr_stack.push(Code.pc - 2);
					Code.fixup(adr);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DummyFixed",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DummyJump ::= 
            {
              Object RESULT =null;
		 
				Code.putJump(0);
				adr_stack.push(Code.pc - 2);
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DummyJump",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ConditionFixed ::= Condition DummyJump 
            {
              Object RESULT =null;
		
					while(!or_stack.empty())
						Code.fixup(or_stack.pop());
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionFixed",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EndFix ::= 
            {
              Object RESULT =null;
		
				Code.fixup(adr_stack.pop());
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("EndFix",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Matched ::= LBRACE StmtList RBRACE 
            {
              Object RESULT =null;
		
				parser.StatementBlocks++;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Matched ::= PRINT LPAREN Expr COMMA NUMCONST RPAREN SEMI 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
				//Generisanje koda
				if(t!= Tab.intType && t != Tab.charType && t!=Tab.find("bool").getType()){
					parser.report_error("Semanticka greska na liniji " + tleft + " : Operand instrukcije print mora biti char, int ili bool tipa! ", null); 
				}
				Code.loadConst(n);
				Code.put(t==Tab.charType ? Code.bprint : Code.print);
				
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Matched ::= PRINT LPAREN Expr RPAREN SEMI 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
				//Generisanje koda
				if(t!= Tab.intType && t != Tab.charType && t!=Tab.find("bool").getType()){
					parser.report_error("Semanticka greska na liniji " + tleft + " : Operand instrukcije print mora biti char, int ili bool tipa! ", null); 
				}
				
				Code.loadConst(t==Tab.charType ? 1 : 5);
				Code.put(t==Tab.charType ? Code.bprint : Code.print);
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Matched ::= READ LPAREN Designator RPAREN SEMI 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				if (o.getKind() == Obj.Fld || o.getKind() == Obj.Var || o.getKind() == Obj.Elem) {
					if(o.getType() != Tab.intType && o.getType() != Tab.charType && o.getType()!=Tab.find("bool").getType())
						parser.report_error("Semanticka greska na liniji " + oleft + " : Operand instrukcije print mora biti char, int ili bool tipa! ", null); 
				
				Code.put(o.getType() == Tab.charType ? Code.bread : Code.read);
				Code.store(o);	
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Matched ::= RETURN Expr SEMI 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				if(currentMethod != null){
					returnFound = true;
					//da li se return iskaz poklapa sa deklarisanim tipom rezultata
					Struct currMethType = currentMethod.getType();
					if (currMethType == Tab.noType) {
						parser.report_error("Semanticka greska, na liniji " + tleft + ". Funkcija je tipa void i ne treba da vrati povratnu vrednost.", null);
					}
					if(!(currMethType.compatibleWith(t))){
						parser.report_error("Greska na liniji " + tleft + " : tip izraza u return naredbi ne slaze se sa tipom povratne vrednosti funkcije" + currentMethod.getName(),null);
					}
					Code.put(Code.exit);
					Code.put(Code.return_);
				
				}else{
					parser.report_error("Semanticka greska na liniji " + tleft + ": Return ne moze biti deklarisan van tela metode", null);
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Matched ::= RETURN SEMI 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				if(currentMethod == null){
					returnFound = true;
					Code.put(Code.exit);
					Code.put(Code.return_);
					if (currentMethod.getType() != Tab.noType) {
						parser.report_error("Semanticka greska, na liniji " + rleft + ". Funkcija nije tipa void i mora da vrati povratnu vrednost.", null);
					}
				}else{
					parser.report_error("Semanticka greska na liniji " + rleft + ": Return ne moze biti deklarisan van tela metode", null);
				}
				
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Matched ::= CONTINUE SEMI 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				if(!isFor){
					parser.report_error("Semanticka greska, na liniji " + cleft+ ". Break se moze koristiti samo unutar for petlje! ", null);
				}else{
					int adr = contAdr;
					Code.putJump(adr);
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Matched ::= BREAK SEMI 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				if(!isFor){
					parser.report_error("Semanticka greska, na liniji " + bleft+ ". Break se moze koristiti samo unutar for petlje! ", null);
				}else{
					int adr=adresa -1;
					parser.report_info("JELENA:Sada je pc ="+Code.pc+" a adr je "+adr+" a moja adresa je " + adresa, null);
					Code.putJump(adr);
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Matched ::= DesignatorStatement SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Unmatched ::= FOR NT$5 LPAREN DesignatorStatement SEMI NT$6 ConditionFixed NT$7 SEMI DesignatorStatement RPAREN Matched 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
				Code.putJump(for_stack.pop());
				if(!adr_stack.empty())
					Code.fixup(adr_stack.pop());
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

				adresa = Code.pc - 2;
				adr_stack.push(Code.pc-2);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$7",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

				for_stack.push(Code.pc); 
			 	contAdr = Code.pc;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$5 ::= 
            {
              Object RESULT =null;
 
			 	isFor = true;
			 	
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Unmatched ::= IF LPAREN error RPAREN Matched ELSE Statement 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
			 	parser.report_error("Uspesan oporavak od greske na liniji " + rleft+ ":Logicki izraz unutar if instrukcije nije dobro postavljen", null);
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Unmatched ::= IF LPAREN ConditionFixed RPAREN Matched ELSE DummyFixed Statement EndFix 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Unmatched ::= IF LPAREN ConditionFixed RPAREN Statement EndFix 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Statement ::= Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Statement ::= Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // StmtList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StmtList",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // StmtList ::= StmtList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StmtList",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Parameter ::= Type error 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				parser.report_error("Uspesan oporavak od greske na liniji " + rleft +" usled deklaracije formalnog parametra funkcije", null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Parameter",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Parameter ::= Type IDENT LSQUARE RSQUARE 
            {
              Object RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				if(params == null) params = new LinkedList<Obj>();
				parser.FormalMethodArgs++;
				Obj obj = Tab.find(varName);
				Obj prom = Tab.noObj;
				if(obj  == Tab.noObj){
					
					prom = Tab.insert(Obj.Var, varName, new Struct(Struct.Array,varType));
					parser.report_info("Deklarisan formalni parametar(niz) " +varName + " funkcije " + currentMethod.getName() +" na liniji " +varNameleft, null);
					if(params != null){
						params.add(prom);
					}else{
						parser.report_error("Greska! Lista za formalne parametre nije inicijalizovana!", null);
					}
				}
				
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Parameter",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Parameter ::= Type IDENT 
            {
              Object RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				if(params == null) params = new LinkedList<Obj>();
				parser.FormalMethodArgs++;
				Obj obj = Tab.find(varName);
				Obj prom = Tab.noObj;
				if(obj  == Tab.noObj || obj.getLevel() != currentMethod.getLevel()){
					
					prom = Tab.insert(Obj.Var, varName, varType);
					parser.report_info("Deklarisan formalni parametar " +varName + " funkcije " + currentMethod.getName()+" na liniji " +varNameleft, null);
					if(params != null){
						params.add(prom);
					}else{
						parser.report_error("Greska! Lista za formalne parametre nije inicijalizovana!", null);
					}
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Parameter",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ParameterList ::= Parameter 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ParameterList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ParameterList ::= ParameterList COMMA Parameter 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ParameterList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FormPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FormPars ::= ParameterList 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				if(currentMethod.getName().equals("main"))
					parser.report_error("Greska na liniji " + pleft +":Main metoda ne moze imati parametre!", null);
				else{
					if(formPars!=null)
						formPars.put(currentMethod.getName(), params);
					params = null;
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MethodDecl ::= ReturnTypeVoid IDENT NT$2 LPAREN FormPars RPAREN LocalVarList LBRACE NT$3 StmtList NT$4 RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).value;
		
					if(!returnFound && retType != Tab.noType)
						parser.report_error("Semanticka greska na liniji " + methNameleft + ": funkcija " + methName +" nema return iskaz!", null);
					Code.put(Code.exit);
					Code.put(Code.return_);
					
					Tab.chainLocalSymbols(currentMethod);
					Tab.closeScope();
					
					returnFound = false;
					currentMethod = null;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;

					parser.StatementBlocks++;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;

				 	
				 	currentMethod.setAdr(Code.pc);
				 	if("main".equals(methName)){
				 		Code.mainPc = currentMethod.getAdr();
				 		mainMethod = currentMethod;
				 		mainScope = Tab.currentScope();
				 	}
				 	Code.put(Code.enter);
				 	Code.put(currentMethod.getLevel());
				 	Code.put(Tab.currentScope().getnVars());
				 	podesiFormalneParametre(methName);
				 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$2 ::= 
            {
              Object RESULT =null;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

					if(methName.equals("main") && retType != Tab.noType){
						
						parser.report_info("Semanticka greska na liniji  " + methNameleft + ": funkcija main ne sme da ima povratnu vrednost!", null);
					}
					if(!currentClass){
						currentMethod = Tab.insert(Obj.Meth, methName, retType);
						parser.report_info("Obradjuje se funkcija " + methName + " na liniji " + methNameleft, null);
						Tab.openScope();
						opsezi.put(methName, Tab.currentScope);
						varOffset = 0;
					}else{
						parser.InnerMethodsDef++;
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ReturnTypeVoid ::= VOID 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						RESULT = Tab.noType;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnTypeVoid",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ReturnTypeVoid ::= Type 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						RESULT = t;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnTypeVoid",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // StaticMethodDecl ::= MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StaticMethodDecl",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // StaticMethodDecl ::= STATIC MethodDecl 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
						if(currentClass != false){
							parser.staticInnerMethods++;
						}else{
							parser.report_error("Semanticka greska na liniji " + sleft +": Kljucna rec static moze da se koristi samo za staticke metode unutrasnjih klasa!", null);
						}
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StaticMethodDecl",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MethodDeclList ::= MethodDeclList StaticMethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LocalVarDecl ::= LBRACE LocalVarList LBRACE MethodDeclList RBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDecl",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LocalVarDecl ::= LBRACE LocalVarList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDecl",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassName ::= IDENT 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				currentClass = true;
				RESULT = name;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassName",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassDecl ::= CLASS ClassName EXTENDS Type LocalVarDecl 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
			
				if(t.getKind()!= Struct.Class){
					parser.report_error("Semanticka greska na liniji " +tleft +": Klasa ne moze da se izvodi iz objekta koji ne predstavlja unutrasnju klasu!", null);
				}
				parser.InnerClassDef++;	
				currentClass = false;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ClassDecl ::= CLASS ClassName LocalVarDecl 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				parser.InnerClassDef++;		
				currentClass = false;	
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LocalVarList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LocalVarList ::= LocalVarList VarDecl 
            {
              Object RESULT =null;
		
					if(currentClass == true)
						parser.InnerFieldsDecl++;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VarPart ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				if(currentMethod == null)
					parser.report_info("Uspesan oporavak od greske na liniji " + sleft + " pri definisanju globalne promenljive", null); 
				else
					parser.report_info("Uspesan oporavak od greske na liniji " + sleft + " pri definisanju lokalne promenljive", null); 
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarPart",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VarPart ::= IDENT LSQUARE RSQUARE 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
			
				Obj object = Tab.noObj;
				boolean mozeSeDefinisati = true;
				if (Tab.currentScope != null) {
					if (Tab.currentScope.getLocals() != null) {
						object = Tab.currentScope.getLocals().searchKey(varName);
						if (object != null) {mozeSeDefinisati = false;}
					}
				}
				if (mozeSeDefinisati) { 
					if (currentClass != false && currentMethod == null) {
						parser.report_info("Deklarisano polje (niz) "+ varName+" na liniji "+ varNameleft, null);
						Tab.insert(Obj.Fld, varName, new Struct(Struct.Array, currentType));
						parser.InnerFieldsDecl++;
					} else {//nije rec o klasi
						parser.report_info("Deklarisana promenljiva (niz) "+ varName+" na liniji "+ varNameleft, null);
						Obj obj = Tab.insert(Obj.Var, varName, new Struct(Struct.Array, currentType));
						if (obj.getLevel() == 0) {
							parser.globalArrDecl++;
						}else{
							parser.localVarsCount++;
						}
					}
				} else {//promenljiva vec postoji u tabeli simbola
					if (object.getKind() == Obj.Fld) {
						parser.report_error("Semanticka greska na liniji " + varNameleft + ", polje (niz)" + varName + " je vec definisano. ", null);
					} else {
						parser.report_error("Semanticka greska na liniji " + varNameleft + ", promenljiva (niz)" + varName + " je vec definisan. ", null);
					}
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarPart",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarPart ::= IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					
					Obj temp = Tab.find(varName);
					Obj prom = Tab.noObj;
					if(temp== Tab.noObj){
						parser.report_info("Deklarisana promenljiva "+ varName+" na liniji "+ varNameleft, null);
						if(currentMethod != null){
							if("main".equals(currentMethod.getName()))
								parser.localVarsCount++;
							prom = Tab.insert(Obj.Var, varName, currentType);
						}
						else {
							parser.globalVarsCount++;
							prom = Tab.insert(Obj.Var, varName, currentType); 
						}
					}else{
						
						parser.report_error("Promenljiva "+ varName+" na liniji "+ varNameleft+ " je vec definisana!", null);
					}
				
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarPart",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarDeclList ::= VarPart 
            {
              Object RESULT =null;
		int vpleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object vp = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarDeclList ::= VarDeclList COMMA VarPart 
            {
              Object RESULT =null;
		int vpleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object vp = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarDeclX ::= error 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			parser.report_info("Uspesan oporavak od greske na liniji " + rleft + " pri definisanju lokalne promenljive", null); 
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclX",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarDeclX ::= VarDeclList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclX",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VarDecl ::= Type NT$1 VarDeclX 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$1 ::= 
            {
              Object RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

			currentType = varType;
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstDeclPart ::= IDENT EQUAL BOOLCONST 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int boolleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				
				if (Tab.noObj == Tab.find(varName)) {//znaci da ne postoji u tabeli simbola i da se moze deklarisati
 					parser.report_info("Deklarisana konstanta "+ varName+" na liniji "+ varNameleft, null);
 					Obj o = Tab.insert(Obj.Con, varName, currentType);
 					if (currentType != Tab.find("bool").getType()) {//nije odgovarajuci tip da bi mu se dodelila vrednost bool
						parser.report_error("Semanticka greska na liniji " + varNameleft + ", konstanti datog tipa se ne moze dodeliti vrednost bool. ", null);
					} else {
						parser.globalConstDef++;
						if (bool.booleanValue()) {
							o.setAdr(1);
						} else {
							o.setAdr(0);
						}
					}  
 				}else {
 					parser.report_error("Semanticka greska na liniji " + varNameleft + ", promenljiva " + varName + " je vec definisana. ", null);
 				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclPart",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstDeclPart ::= IDENT EQUAL CHARCONST 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int characterleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int characterright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character character = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				
				if(Tab.noObj == Tab.find(varName)){
					parser.report_info("Deklarisana konstanta "+varName+ " na liniji " + varNameleft, null);
					Obj o = Tab.insert(Obj.Con, varName, currentType);
					if(currentType != Tab.charType){
						parser.report_error("Semanticka greska na liniji " + varNameleft + " konstanti datog tipa se ne moze dodeliti vrednost karaktera. ", null);
					} else{
						parser.globalConstDef++;
						o.setAdr(character); 
					}
				}
				else{
					parser.report_error("Semanticka greska na liniji " + varNameleft + ", promenljiva " + varName + " je vec definisana. ", null);
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclPart",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstDeclPart ::= IDENT EQUAL NUMCONST 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int numberleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer number = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				
				if(Tab.noObj == Tab.find(varName)){
					//ime ne postoji u tabeli simbola i moze se deklarisati
					parser.report_info("Deklarisana konstanta " + varName + "na liniji " +varNameleft, null); 
					Obj o = Tab.insert(Obj.Con, varName, currentType);
					if(currentType != Tab.intType){
						parser.report_error("Semanticka greska na liniji " + varNameleft + "konstanti datog tipa se ne moze dodeliti vrednost celog broja. ", null);
					} else {
						parser.globalConstDef++;
						o.setAdr(number.intValue()); 
					} 
				}else{
					parser.report_error("Semanticka greska na liniji " + varNameleft + ", promenljiva " + varName + " je vec definisana. ", null);
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclPart",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstDeclList ::= ConstDeclPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclList",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstDeclList ::= ConstDeclList COMMA ConstDeclPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclList",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
			
	//obrada tipa
	//da proveri da li se radi o id tipa
	
	Obj typeNode = Tab.find(typeName);
	if(typeNode == Tab.noObj) {
		//ime ne postoji u tabeli simbola - prijavi semanticku gresku
		parser.report_error("Nije pronadjen tip " + typeName + "u tabeli simbola!", null);
		currentType = Tab.noType;
		RESULT = currentType;
	}else{
		if(Obj.Type == typeNode.getKind()){
			newOp = typeNode;
			currentType= typeNode.getType();
			RESULT = currentType;
		}else{
			parser.report_error("Greska na liniji " + typeNameleft + ": Ime" + typeName + "ne predstavlja tip", null);
			currentType = Tab.noType;
			RESULT = currentType;
		}
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstDecl ::= CONST Type NT$0 ConstDeclList SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int constTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int constTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct constType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$0 ::= 
            {
              Object RESULT =null;
		int constTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int constTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct constType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

				currentType = constType;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclPart ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclPart",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DeclPart ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclPart",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DeclPart ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclPart",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclList ::= DeclList DeclPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgName ::= IDENT 
            {
              Obj RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String pName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
	RESULT = Tab.insert(Obj.Prog, pName, Tab.noType);  //objektni cvor
	Tab.openScope(); //otvaranje novog opega - da ne bi isao u universe
	
    parser.output.append("========= SEMANTICKA OBRADA =========\n");
    popuniFunkcije();
 	scope = Tab.currentScope;
 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgName",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROGRAM ProgName DeclList LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
	Code.dataSize = Tab.currentScope().getnVars();
	// p je objektni cvor za program
	if(mainMethod == null)
		parser.report_error("Metoda main nije deklarisana u programu!", null);
	Tab.chainLocalSymbols(p); //ulancavanje svih lokalnih imena
	
	Tab.closeScope();

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

